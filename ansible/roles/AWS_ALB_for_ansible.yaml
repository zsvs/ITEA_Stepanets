Description: This template deploys a VPC, with public subnets spread across two Availability Zones, 
  two EC2 instances which is inside target group, application load balancer with HTTP1 listener that have two rules.
  
Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    
  HomeIpAddress: 
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Description: My home ipv4 address that can be used to SSH to the EC2 instances
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    
  AllowedAddresses:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type:  AWS::EC2::Image::Id
    Default: "ami-063d4ab14480ac177"
    
  LoadBalancerName:
    Type: String
    Default: "MyLoadBalancer"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
          
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  "" ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
          
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2   

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds: [!Ref WebServersSecurityGroup]
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: WebServer1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds: [!Ref WebServersSecurityGroup]
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WebServer2

  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "MyTargetGroup"
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      HealthCheckPort: 8080
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
      VpcId: !Ref MyVPC
      Tags: 
        - Key: Name
          Value: MyTargetGroup
         
  MyALB:        
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Name: !Ref LoadBalancerName
      Scheme: "internet-facing"
      SecurityGroups: [!Ref "ELBSecurityGroupInboundRule"]
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: ApplicationLoadBalancer
      Type: "application"

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
     DefaultActions:
       - Type: "fixed-response"
         FixedResponseConfig:
           ContentType: "text/plain"
           MessageBody: "Try another URL"
           StatusCode: 200
     LoadBalancerArn: !Ref MyALB
     Port: 8080
     Protocol: "HTTP"
     
  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values: ["/test"]
      ListenerArn: !Ref HTTPlistener
      Priority: 1

  WebServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "WebServer-sg"
      GroupDescription: Allow http/https from ELB & enable SSH from home
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref HomeIpAddress              
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: !Ref AllowedAddresses
        
  WebServersSecurityGroupInboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
        GroupId: !Ref WebServersSecurityGroup
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !GetAtt ELBSecurityGroupInboundRule.GroupId    

  ELBSecurityGroupInboundRule:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "LoadBalancer-sg"
      GroupDescription: Allow http/80 to ELB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AllowedAddresses
        
Outputs:

  Instance1Id:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance1

  Instance2Id:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance2

  AZ1:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt EC2Instance1.AvailabilityZone
 
  AZ2:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt EC2Instance2.AvailabilityZone   
    
  LoadBalancer:
    Description: Application load balancer
    Value: !Ref MyALB
    
  SecurityGroupForALB:
    Description: Security group for load balancer
    Value: !Ref ELBSecurityGroupInboundRule
    
  WebServerSecurityGroup:
    Description: WebServers security group for load balancer
    Value: !Ref WebServersSecurityGroup    

  TargetGroup1:
    Description: Target group 1
    Value: !Ref TargetGroup1

  ListenerRule1Arn:
    Description: Listner rule 1
    Value: !Ref ListenerRule1

  TargetGroupFullName1:
    Description: FullName of TargetGroup1
    Value: !GetAtt TargetGroup1.TargetGroupFullName

  LoadBalancersAssociatedWithTargetGroup1:
    Description: LoadBalancers associated with TargetGroup
    Value: !Select [0, !GetAtt TargetGroup1.LoadBalancerArns]